[
  {
    "inputs": [],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "bytes16",
        "name": "marketId",
        "type": "bytes16"
      },
      {
        "indexed": true,
        "internalType": "bytes16",
        "name": "propositionId",
        "type": "bytes16"
      }
    ],
    "name": "ResultSet",
    "type": "event"
  },
  {
    "inputs": [
      {
        "internalType": "bytes16",
        "name": "marketId",
        "type": "bytes16"
      },
      {
        "internalType": "bytes16",
        "name": "propositionId",
        "type": "bytes16"
      }
    ],
    "name": "checkResult",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "bytes16",
        "name": "marketId",
        "type": "bytes16"
      }
    ],
    "name": "getResult",
    "outputs": [
      {
        "internalType": "bytes16",
        "name": "",
        "type": "bytes16"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "bytes16",
        "name": "marketId",
        "type": "bytes16"
      },
      {
        "internalType": "bytes16",
        "name": "propositionId",
        "type": "bytes16"
      },
      {
        "components": [
          {
            "internalType": "uint8",
            "name": "v",
            "type": "uint8"
          },
          {
            "internalType": "bytes32",
            "name": "r",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "s",
            "type": "bytes32"
          }
        ],
        "internalType": "struct SignatureLib.Signature",
        "name": "signature",
        "type": "tuple"
      }
    ],
    "name": "setResult",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }
]
